# Everything configurable in SuPA is listed in this file. Simple variable
# expansion a la POSIX is supported.
#
# The configuration variables can also be set as environment variables.
#
#    $ export grpc_max_workers=8
#
# All configuration variables are case sensitive, even when used as environment
# variables, and written using "snake case" (lower case with "_" on word
# boundaries).
#
# In addition to this file and environment variables, the various sub commands
# of the `supa` command line tool accept arguments that can configure the same
# settings, though only when applicable to the sub command currently selected.
# *IMPORTANT*: Command line arguments use `-` instead of underscores in their
# names.
#
# The order of precedence of all these different ways of configuring the same
# configuration variable is (from high to low):
#
# 1. command line argument (eg: supa serve --grpc-max-workers=8)
# 2. environment variable (eg: grpc_max_workers=8 supa serve)
# 3. this file (`supa.env`)
# 4. default value in code (eg: when configuration variable is absent from
#    `supa.env` or when of form `grpc_max_workers=${grpc_max_workers}`

# Application wide settings
#==========================

# ``WAL`` massively improves SQLite's concurrency; it allows DB READS while a
# single WRITE is in progress.  However, it does not work properly over
# networked file systems (eg NFS). When using Kubernetes to deploy SuPA it is
# probably best to only use ``WAL`` in combination with a local volume (See:
# https://kubernetes.io/docs/concepts/storage/volumes/#local) If this is not an
# option, set ``database_journal_mode`` to ``TRUNCATE`` or ``DELETE`` (in order
# of preference)
#
# See also: https://sqlite.org/pragma.html#pragma_journal_mode
#
#database_journal_mode=WAL

# Specify the location of the database file. Resolving the actual location
# follows the following algorithm: If ``database_file`` is an absolute path, we
# are done.  Otherwise determine if SuPA was installed normally or in editable
# mode/development mode.  In case of the former resolve ``database_file``
# relative to ``<venv_dir>/var/db`` In  case of the latter resolve
# ``database_file`` relative to the project root.
#
#database_file=supa.db

# Subcommand specific settings:
#===============================

# Subcommand: ``serve``
#----------------------
#grpc_server_max_workers=8

# The address and port SuPA is listening on.
#grpc_server_insecure_address_port=localhost:50051

# The address and port the Requester Agent/PolyNSI is listening on.
#grpc_client_insecure_address_port=localhost:9090

# In addition to serving gRPC requests, SuPA does a fair amount of background
# processing.  This all happens under the control of a scheduler. The scheduler
# has a number of workers it can submit jobs to. This setting configures that
# number. In general it is best to keep this number equal or slightly higher
# than the number of ``grpc_max_workers`` (see below)
#scheduler_max_workers=12

# Name of the domain SuPA is responsible for.
domain=example.domain:2001

# Name of the network SuPA is responsible for.
network_type=topology

# NSA ID of SuPA
nsa_id=urn:ogf:network:example.domain:2013:nsa:supa

# Name of NRM backend module to load.
# The module should contain a class Backend derived from BaseBackend that can
# be used to override any of the SuPA <-> NRM interface methods,
# see src/supa/nrm/backend.py.
#backend=
